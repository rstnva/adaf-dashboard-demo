export type TaskPriority = 1 | 2 | 3 | 4 | 5;

export type TaskRisk = 'low' | 'medium' | 'high' | 'critical';

export type TaskStatus =
  | 'pending'
  | 'planning'
  | 'coding'
  | 'reviewing'
  | 'executing'
  | 'completed'
  | 'failed'
  | 'aborted';

export interface Task {
  /** Unique identifier generated by Coordinator */
  readonly id: string;
  readonly goal: string;
  readonly description?: string;
  readonly priority: TaskPriority;
  readonly deadline?: Date;
  readonly risk: TaskRisk;
  readonly tags: readonly string[];
  readonly createdAt: Date;
  readonly metadata?: Readonly<Record<string, unknown>>;
}

export type AgentKind = 'planner' | 'coder' | 'reviewer' | 'executor';

export interface PlanStep {
  readonly id: string;
  readonly title: string;
  readonly description: string;
  readonly assignee: AgentKind;
  readonly status: TaskStatus;
  readonly dependencies: readonly string[];
  readonly acceptance: readonly string[];
  readonly metrics?: Readonly<Record<string, number>>;
  readonly parameters?: Readonly<Record<string, unknown>>;
  readonly metadata?: Readonly<Record<string, unknown>>;
}

export interface PlanRisk {
  readonly id: string;
  readonly description: string;
  readonly mitigation: string;
  readonly owner: AgentKind;
  readonly severity: TaskRisk;
}

export interface PlanMetric {
  readonly id: string;
  readonly label: string;
  readonly target: string;
  readonly unit?: string;
}

export interface AgentPlan {
  readonly planId: string;
  readonly task: Task;
  readonly steps: readonly PlanStep[];
  readonly risks: readonly PlanRisk[];
  readonly metrics: readonly PlanMetric[];
  readonly model: string;
  readonly createdAt: Date;
}

export interface AgentOptions {
  readonly dryRun?: boolean;
  readonly maxRetries?: number;
  readonly signal?: AbortSignal;
  readonly correlationId?: string;
  readonly payload?: Readonly<Record<string, unknown>>;
}

export interface AgentObservation {
  readonly stepId: string;
  readonly outcome: 'success' | 'failed' | 'skipped';
  readonly details?: string;
  readonly artifacts?: Readonly<Record<string, unknown>>;
  readonly elapsedMs?: number;
}

export interface AgentActionResult {
  readonly stepId: string;
  readonly outcome: 'success' | 'failed';
  readonly message?: string;
  readonly artifacts?: Readonly<Record<string, unknown>>;
  readonly startedAt: Date;
  readonly finishedAt: Date;
  readonly retries: number;
}

export interface AgentReport<T = unknown> {
  readonly agent: AgentKind;
  readonly summaries: readonly string[];
  readonly output?: T;
  readonly issues: readonly string[];
  readonly stats: Readonly<Record<string, number>>;
  readonly metadata?: Readonly<Record<string, unknown>>;
}
