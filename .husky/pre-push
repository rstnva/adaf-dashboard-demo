#!/usr/bin/env sh

# Allow override for CI/CD or emergency fixes
if [ "$SKIP_PUSH_CHECKS" = "1" ]; then
  echo "‚ö†Ô∏è  SKIP_PUSH_CHECKS=1: Bypassing pre-push checks"
  exit 0
fi

echo "üöÄ pre-push: Running checks before push..."

# Check if we're pushing to protected branches
PROTECTED_BRANCHES="^(main|master|production|staging)$"
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

if echo "$CURRENT_BRANCH" | grep -qE "$PROTECTED_BRANCHES"; then
  echo "‚ö†Ô∏è  WARNING: Pushing to protected branch: $CURRENT_BRANCH"
  echo "   This should only happen through Pull Requests!"
  echo ""
  read -p "Are you sure you want to continue? (yes/no): " confirm
  if [ "$confirm" != "yes" ]; then
    echo "‚ùå Push aborted."
    exit 1
  fi
fi

# Run tests (skip if --no-verify)
echo "üß™ Running test suite..."
npm run test:ci || {
  echo "‚ùå Tests failed. Fix tests before pushing."
  echo "   Hint: Run 'pnpm test' locally to debug"
  echo "   To skip (NOT RECOMMENDED): git push --no-verify"
  exit 1
}

# Security audit
echo "üîí Running security audit..."
pnpm audit --audit-level=high || {
  echo "‚ö†Ô∏è  Security vulnerabilities found!"
  echo "   Run 'pnpm audit' for details"
  echo "   Fix with 'pnpm audit --fix' or document exceptions"
  exit 1
}

# Check for large files (>5MB)
echo "üì¶ Checking for large files..."
MAX_SIZE=5242880  # 5MB in bytes
git diff --cached --name-only | while read file; do
  if [ -f "$file" ]; then
    size=$(wc -c < "$file")
    if [ "$size" -gt "$MAX_SIZE" ]; then
      echo "‚ùå File too large: $file ($(($size / 1024 / 1024))MB)"
      echo "   Max allowed: 5MB"
      echo "   Consider using Git LFS or external storage"
      exit 1
    fi
  fi
done

# Check for unsigned commits (Fortune 500 requirement)
echo "‚úçÔ∏è  Verifying commit signatures..."
UNSIGNED=$(git log origin/$(git rev-parse --abbrev-ref HEAD)..HEAD --show-signature 2>&1 | grep -c "No signature" || true)
if [ "$UNSIGNED" -gt 0 ]; then
  echo "‚ö†Ô∏è  WARNING: $UNSIGNED unsigned commit(s) detected"
  echo "   Fortune 500 standard requires GPG-signed commits"
  echo "   Setup: git config --global commit.gpgsign true"
  echo ""
  read -p "Continue anyway? (yes/no): " confirm_unsigned
  if [ "$confirm_unsigned" != "yes" ]; then
    echo "‚ùå Push aborted. Sign your commits first."
    exit 1
  fi
fi

echo "‚úÖ Pre-push checks passed! Proceeding with push."
